/*jslint browser: true */
/*global jQuery, console */

  "use strict";
  // Define AJAX object
    var ajax = {},
      defaultTimeout = 30000,
      buildGlobalError = function(message, level) {
        return {
          "FailureMessageBean": {
            "globalMessages": [{
              message: message,
              level: level || "error"
            }],
            "fieldMessages": []
          }
        };
      },
      // Strip comments and decode JSON responses
      extractData = function(response) {
        var stripped = (response.substring(response.indexOf('%') + 1, response.lastIndexOf('%')));
        return stripped.replace(/\\x([0-9A-Fa-f]{2})/g);
      },
      
      // Filter the response when the AJAX call completed successfully,
      // examine the response for an error condition (typically a business error)
      successFilter = function(result) {
        var deferred = $.Deferred(),
          data;
        try {
          data = $.parseJSON(result);
        } catch (err) {          
          var error = buildGlobalError("Error parsing the server response.");
          deferred.rejectWith(error, [error]);
        }
        if ("FailureMessageBean" in data) {
          if (data.FailureMessageBean.fieldMessages === undefined) {
            data.FailureMessageBean.fieldMessages = [];
          }
          deferred.rejectWith(data, [data]);
        } else {
          deferred.resolveWith(data, [data]);
        }
        return deferred;
      },
      // Filter the response when the AJAX call failed
      failureFilter = function(data) {
        var failure = buildGlobalError("test");
        return $.Deferred().rejectWith(failure, [failure, data]);
      },
      getUrlWithContext = function(url) {
       
          return url;
        
      },
      getUrlWithAssetPath = function(url) {
        
          return url;
        
      },
      // Private function to decode a mixed JSON response
      processJSONMixedResponse = function(ajaxResult) {
        var promise = $.Deferred();
        ajaxResult
          .done(function(data) {
            if (data.htmlResponse !== null && data.htmlResponse !== undefined) {
              data.htmlResponse = decodeMixedModeResponse(data.htmlResponse);
            }
            promise.resolveWith(data, [data]);
          })
          .fail(function(data) {
            promise.rejectWith(data, [data]);
          });
        return promise;
      },
      // Serialize a form object and add a CSRF token if a matching url
      // is found in mwfGlobals.csrfPostUrls (values contained within would have 
      // been generated by the server)
      getSerializedFormWithCSRFToken = function(url, form) {
        var serializedForm = form.serialize();
         
        return serializedForm;
      },
      // Decode JSON response
      decodeMixedModeResponse = function(responseHTML) {
        var decodedHTML = $("<textarea />").html(responseHTML).text();
        return decodedHTML;
      };
    ajax.postForm = function(url, form) {
      var serializedForm = getSerializedFormWithCSRFToken(url, form);
      return $.ajax({
        url: getUrlWithContext(url),
        data: serializedForm,
        type: "POST",
        timeout: defaultTimeout
      }).then(successFilter, failureFilter);
    };
    //added for handling F=M type for ajax post call 
    ajax.postFormMixedResponse = function(url, form) {
      var serializedForm = getSerializedFormWithCSRFToken(url, form),
        result = $.ajax({
          url: getUrlWithContext(url),
          data: serializedForm,
          type: "POST",
          timeout: defaultTimeout
        }).then(successFilter, failureFilter);
      return processJSONMixedResponse(result);
    };
    ajax.postData = function(url, data) {
      var csrfPostUrls = mwfGlobals.csrfPostUrls || [];
      for (var i = csrfPostUrls.length - 1; i >= 0; i--) {
        if (csrfPostUrls[i].url === url) {
          data = data + "&" + mwfGlobals.csrfTokenName + "=" + csrfPostUrls[i].token;
          break;
        }
      };
      return $.ajax({
        url: getUrlWithContext(url),
        data: data,
        type: "POST",
        timeout: defaultTimeout
      }).then(successFilter, failureFilter);
    };
    // Public method to fetch JSON data using a GET request
    ajax.getJSON = function(url, data) {
      var result = $.ajax({
        url: getUrlWithContext(url),
        dataType: "json",
        data: $.param($.extend({}, data, {
          "F": "J"
        })),
        type: "GET",
        contentType: "application/html; application/json; charset=utf-8",
        timeout: defaultTimeout
      }).then(successFilter, failureFilter);
      return result;
    };
    //External JSON
    ajax.getExternalJSON = function(url, data) {
      var result = $.ajax({
        url: url,
        dataType: "json",
        data: data,
        type: "GET",
        cache: false,
        timeout: defaultTimeout
      });
      return result;
    };
    // Public method to fetch an HTML response using a GET request
    ajax.getHTML = function(url, data) {
      return $.ajax({
        url: getUrlWithContext(url),
        dataType: "html",
        data: $.param($.extend({}, data, {
          "F": "H"
        })),
        type: "GET",
        contentType: "application/html; charset=utf-8",
        timeout: defaultTimeout
      });
    };
    ajax.getHtmlAndJSON = function(url, data) {
      var result = $.ajax({
        url: getUrlWithContext(url),
        type: "GET",
        data: $.param($.extend({}, data, {
          "F": "M"
        })),
        contentType: "application/html; application/json; charset=utf-8",
        timeout: defaultTimeout
      }).then(successFilter, failureFilter);
      return processJSONMixedResponse(result);
    };
    ajax.loadFragment = function(url) {
      return $.ajax({
        url: getUrlWithAssetPath(url),
        type: "GET",
        timeout: defaultTimeout
      });
    };
    ajax.del = function(url, data) {
      return $.ajax({
        url: getUrlWithContext(url + "?F=J"),
        dataType: "json",
        data: $.param($.extend({}, data)),
        type: "DELETE",
        contentType: "application/html; application/json; charset=utf-8",
        timeout: defaultTimeout
      }).then(successFilter, failureFilter);
    };